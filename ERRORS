import React, { useMemo, useState, useEffect } from 'react';
import { AlertTriangle } from 'lucide-react';
import {
  ResponsiveContainer,
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
} from 'recharts';

const ForecastingAlerts = ({
  forecastData = [],
  alertsData = [],
  loading,
  darkMode,
}) => {
  const [threshold, setThreshold] = useState(() => {
    const stored = localStorage.getItem('critical_threshold');
    return stored ? parseFloat(stored) : 0.5;
  });

  const latestForecast = forecastData?.[forecastData.length - 1]?.value || 0;

  // Save threshold to localStorage on change
  useEffect(() => {
    localStorage.setItem('critical_threshold', threshold.toString());
  }, [threshold]);

  const sortedAlerts = useMemo(() => {
    return alertsData.sort((a, b) => parseFloat(b.percentage) - parseFloat(a.percentage));
  }, [alertsData]);

  return (
    <div className={`rounded-lg ${darkMode ? 'bg-gray-800 border border-gray-700' : 'bg-white shadow-lg'} transition-shadow duration-300 hover:shadow-xl`}>
      <div className="p-4 border-b border-gray-200 dark:border-gray-700">
        <h2 className="text-xl font-bold flex items-center justify-between">
          <span className="flex items-center">
            <AlertTriangle className="mr-2 h-5 w-5" />
            Forecasting & Alerts
          </span>
          {/* Threshold Selector */}
          <select
            value={threshold}
            onChange={(e) => setThreshold(parseFloat(e.target.value))}
            className={`ml-4 p-1 rounded text-sm ${darkMode ? 'bg-gray-700 text-white' : 'bg-gray-100 text-gray-800'}`}
          >
            {[0.25, 0.3, 0.4, 0.5, 0.6, 0.75].map((val) => (
              <option key={val} value={val}>
                Threshold: {(val * 100).toFixed(0)}%
              </option>
            ))}
          </select>
        </h2>
      </div>

      {loading ? (
        <div className="flex justify-center items-center h-64">
          <div className="relative">
            <div className={`animate-spin rounded-full h-12 w-12 border-4 border-t-transparent ${darkMode ? 'border-blue-400' : 'border-blue-600'}`} />
            <div className="absolute inset-0 flex items-center justify-center">
              <span className={`text-xs font-medium ${darkMode ? 'text-blue-400' : 'text-blue-600'}`}>Loading</span>
            </div>
          </div>
        </div>
      ) : (
        <div className="p-4 grid grid-cols-1 lg:grid-cols-2 gap-4">
          {/* Forecast Chart */}
          <div>
            <h3 className="text-lg font-medium mb-2">Limitation Forecast</h3>
            <ResponsiveContainer width="100%" height={200}>
              <LineChart data={forecastData} margin={{ top: 5, right: 5, left: 0, bottom: 5 }}>
                <CartesianGrid strokeDasharray="3 3" stroke={darkMode ? '#444' : '#ddd'} />
                <XAxis dataKey="name" tick={{ fill: darkMode ? '#ccc' : '#333' }} />
                <YAxis
                  tickFormatter={(value) => `${(value * 100).toFixed(0)}%`}
                  tick={{ fill: darkMode ? '#ccc' : '#333' }}
                />
                <Tooltip
                  contentStyle={{
                    backgroundColor: darkMode ? '#2d3748' : '#fff',
                    borderColor: darkMode ? '#4a5568' : '#e2e8f0',
                    color: darkMode ? '#fff' : '#000',
                  }}
                  formatter={(value) => [`${(value * 100).toFixed(2)}%`, 'Limitation']}
                />
                <Line
                  type="monotone"
                  dataKey="value"
                  stroke={darkMode ? '#9F7AEA' : '#8B5CF6'}
                  strokeWidth={2}
                  dot={{ fill: darkMode ? '#9F7AEA' : '#8B5CF6', r: 4 }}
                />
                <Line
                  type="monotone"
                  dataKey={() => threshold}
                  stroke={darkMode ? '#FC8181' : '#F56565'}
                  strokeDasharray="3 3"
                  strokeWidth={2}
                  dot={false}
                  activeDot={false}
                  name={`Threshold (${(threshold * 100).toFixed(0)}%)`}
                />
              </LineChart>
            </ResponsiveContainer>
            <div className="mt-2 text-xs text-center">
              <span className="font-medium">Forecast:</span>{' '}
              {latestForecast > threshold ? (
                <span className="text-red-500 font-medium">Increasing trend ↗ (Action required)</span>
              ) : (
                <span className="text-green-500 font-medium">Stable trend → (Normal)</span>
              )}
            </div>
          </div>

          {/* Critical Alerts */}
          <div>
            <h3 className="text-lg font-medium mb-2">Critical Alerts</h3>
            <div className={`rounded-lg ${darkMode ? 'bg-gray-900' : 'bg-gray-50'} p-3 overflow-auto`} style={{ maxHeight: '200px' }}>
              {sortedAlerts.length > 0 ? (
                <ul className="space-y-2">
                  {sortedAlerts.map((alert, index) => (
                    <li
                      key={index}
                      className={`p-3 rounded-lg ${darkMode ? 'bg-gray-800' : 'bg-white'} border-l-4 border-red-500 shadow-sm`}
                    >
                      <div className="flex justify-between items-center">
                        <div className="font-bold">{alert.ceid}</div>
                        <div className={`px-2 py-1 rounded-full text-xs font-medium ${parseFloat(alert.percentage) > threshold ? 'bg-red-500 text-white' : 'bg-yellow-400 text-gray-900'}`}>
                          {(parseFloat(alert.percentage) * 100).toFixed(1)}%
                        </div>
                      </div>
                      <div className="text-sm mt-1">
                        <span className={darkMode ? 'text-gray-400' : 'text-gray-600'}>Area:</span> {alert.area}
                      </div>
                      <div className="text-sm">
                        <span className={darkMode ? 'text-gray-400' : 'text-gray-600'}>Count:</span> {alert.count} limitations
                      </div>
                    </li>
                  ))}
                </ul>
              ) : (
                <div className="flex flex-col items-center justify-center py-6 text-center">
                  <div className={`p-3 rounded-full ${darkMode ? 'bg-green-900 bg-opacity-30' : 'bg-green-100'} mb-2`}>
                    <div className={`h-6 w-6 ${darkMode ? 'text-green-400' : 'text-green-600'}`}>✓</div>
                  </div>
                  <p className="text-sm font-medium">No critical alerts at this time</p>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ForecastingAlerts;
