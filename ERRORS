// components/CeidDashboard.js
import React, { useState, useEffect } from 'react';
import { fetchCeidData } from '../utils/fetchCeidData';
import CeidTable from './CeidTable';

const DATA_URL = 'http://localhost:5000/api/aba-history';

function CeidDashboard() {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [sortConfig, setSortConfig] = useState({ key: 'CEID', direction: 'ascending' });
  const [filterValue, setFilterValue] = useState('');
  const [darkMode, setDarkMode] = useState(false); // Adjust as needed

  useEffect(() => {
    const fetchData = async () => {
      try {
        const fetchedData = await fetchCeidData(DATA_URL);
        setData(fetchedData);
      } catch (error) {
        console.error('Error fetching CEID data:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();

    const intervalId = setInterval(fetchData, 2 * 60 * 60 * 1000); // Refresh every 2 hours

    return () => clearInterval(intervalId); // Cleanup on unmount
  }, []);

  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  const filteredData = data.filter(item =>
    item.CEID.toLowerCase().includes(filterValue.toLowerCase()) ||
    item.AREA.toLowerCase().includes(filterValue.toLowerCase())
  );

  const sortedData = [...filteredData].sort((a, b) => {
    if (a[sortConfig.key] < b[sortConfig.key]) {
      return sortConfig.direction === 'ascending' ? -1 : 1;
    }
    if (a[sortConfig.key] > b[sortConfig.key]) {
      return sortConfig.direction === 'ascending' ? 1 : -1;
    }
    return 0;
  });

  return (
    <CeidTable
      data={sortedData}
      loading={loading}
      sortConfig={sortConfig}
      requestSort={requestSort}
      filterValue={filterValue}
      setFilterValue={setFilterValue}
      darkMode={darkMode}
    />
  );
}

export default CeidDashboard;
