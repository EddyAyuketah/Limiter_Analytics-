// components/CeidDashboard.js
import React, { useState, useEffect } from 'react';
import CeidTable from './CeidTable';

const DATA_URL = 'http://localhost:5000/api/aba-history'; 

const generateMockData = () => {
  const ceids = ['CVD1', 'CVD2', 'CVD3'];
  const areas = ['Area1', 'Area2'];
  return ceids.map((ceid, i) => {
    const obj = { CEID: ceid, AREA: areas[i % areas.length] };
    [3, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91].forEach(day => {
      obj[`ABA_LIMITER_COUNT_${day}DAYS`] = Math.floor(Math.random() * 10);
      obj[`ABA_PERCENT_FLAGED_${day}DAYS`] = (Math.random() * 0.5).toFixed(4);
    });
    return obj;
  });
};

const CeidDashboard = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [sortConfig, setSortConfig] = useState({ key: 'CEID', direction: 'ascending' });
  const [filterValue, setFilterValue] = useState('');
  const [darkMode, setDarkMode] = useState(false); // toggle as needed

  useEffect(() => {
    const fetchData = async () => {
      try {
        const res = await fetch(DATA_URL);
        if (!res.ok) throw new Error('Failed to fetch file');
        const text = await res.text();

        const lines = text.trim().split('\n');
        const headers = lines[0].split('\t');

        const parsedData = lines.slice(1).map(line => {
          const values = line.split('\t');
          return headers.reduce((obj, header, index) => {
            obj[header] = values[index];
            return obj;
          }, {});
        });

        setData(parsedData);
      } catch (err) {
        console.error('[CeidDashboard] Error loading data:', err.message);
        setData(generateMockData()); // fallback
      } finally {
        setLoading(false);
      }
    };

    fetchData();
    const intervalId = setInterval(fetchData, 2 * 60 * 60 * 1000); // Refresh every 2 hours
    return () => clearInterval(intervalId);
  }, []);

  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  const filteredData = data.filter(item =>
    (item.CEID || '').toLowerCase().includes(filterValue.toLowerCase()) ||
    (item.AREA || '').toLowerCase().includes(filterValue.toLowerCase())
  );

  const sortedData = [...filteredData].sort((a, b) => {
    const aVal = isNaN(a[sortConfig.key]) ? a[sortConfig.key] : parseFloat(a[sortConfig.key]);
    const bVal = isNaN(b[sortConfig.key]) ? b[sortConfig.key] : parseFloat(b[sortConfig.key]);

    if (aVal < bVal) return sortConfig.direction === 'ascending' ? -1 : 1;
    if (aVal > bVal) return sortConfig.direction === 'ascending' ? 1 : -1;
    return 0;
  });

  return (
    <CeidTable
      data={sortedData}
      loading={loading}
      sortConfig={sortConfig}
      requestSort={requestSort}
      filterValue={filterValue}
      setFilterValue={setFilterValue}
      darkMode={darkMode}
    />
  );
};

export default CeidDashboard;
