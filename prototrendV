
"use client";

import { useState, useMemo } from "react";
import { Line } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";
import type { ToolData } from "@/types/tool";

// Register necessary chart components
ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);

interface TrendVisualizationProps {
  data: ToolData[];
}

const colorPalette = [
  "rgba(255, 99, 132, 1)",
  "rgba(54, 162, 235, 1)",
  "rgba(255, 206, 86, 1)",
  "rgba(75, 192, 192, 1)",
  "rgba(153, 102, 255, 1)",
  "rgba(255, 159, 64, 1)",
  "rgba(0, 204, 150, 1)",
  "rgba(255, 0, 255, 1)",
  "rgba(0, 255, 255, 1)",
  "rgba(128, 0, 0, 1)",
];

export default function TrendVisualization({ data }: TrendVisualizationProps) {
  const [viewMode, setViewMode] = useState<"CEID" | "Area">("CEID"); // New Toggle Mode
  const [selectedCEIDs, setSelectedCEIDs] = useState<string[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedArea, setSelectedArea] = useState<string>("All");
  const [selectedProcess, setSelectedProcess] = useState<string>("All");
  const [selectedAreas, setSelectedAreas] = useState<string[]>([]); // Stores selected areas in Area mode

  // Extract time periods dynamically
  const sampleTool = data.length > 0 ? data[0] : null;
  const timePeriods = sampleTool
    ? Object.keys(sampleTool).filter((key) => key.includes("ABA_PERCENT_FLAGED"))
    : [];

  // Unique Areas
  const uniqueAreas = useMemo(() => {
    const areas = new Set(data.map((tool) => tool.AREA));
    return ["All", ...Array.from(areas)];
  }, [data]);

  // Available Processes
  const availableProcesses = ["All", "1274", "1278", "5053"];

  // Filter data based on AREA and PROCESS selection
  const filteredData = useMemo(() => {
    return data.filter((tool) => {
      const areaMatch =
        viewMode === "CEID"
          ? selectedArea === "All" || tool.AREA === selectedArea
          : selectedAreas.includes(tool.AREA);
      const processMatch = selectedProcess === "All" || tool.PROCESS.toString() === selectedProcess;
      return areaMatch && processMatch;
    });
  }, [data, selectedArea, selectedProcess, selectedAreas, viewMode]);

  // Filter CEIDs based on search term and selected filters
  const filteredCEIDs = filteredData
    .map((tool) => tool.CEID)
    .filter((ceid) => ceid.toLowerCase().includes(searchTerm.toLowerCase()));

  // Prepare chart data
  const chartData = useMemo(() => {
    if (viewMode === "CEID") {
      return {
        labels: timePeriods.map((key) => key.replace("ABA_PERCENT_FLAGED_", "").replace("DAYS", " Days")),
        datasets: selectedCEIDs.map((CEID, index) => {
          const tool = filteredData.find((t) => t.CEID === CEID);
          return {
            label: CEID,
            data: timePeriods.map((key) => ((tool as any)?.[key] ?? 0) * 100),
            borderColor: colorPalette[index % colorPalette.length],
            backgroundColor: colorPalette[index % colorPalette.length].replace("1)", "0.2)"),
            tension: 0.1,
            fill: true,
          };
        }),
      };
    } else {
      const areaData: { [area: string]: number[] } = {};
      selectedAreas.forEach((area) => {
        const areaTools = filteredData.filter((tool) => tool.AREA === area);
        const averagedValues = timePeriods.map((key) => {
          const total = areaTools.reduce((sum, tool) => sum + ((tool as any)?.[key] ?? 0), 0);
          return total / (areaTools.length || 1);
        });
        areaData[area] = averagedValues;
      });

      return {
        labels: timePeriods.map((key) => key.replace("ABA_PERCENT_FLAGED_", "").replace("DAYS", " Days")),
        datasets: Object.keys(areaData).map((area, index) => ({
          label: area,
          data: areaData[area].map((value) => value * 100),
          borderColor: colorPalette[index % colorPalette.length],
          backgroundColor: colorPalette[index % colorPalette.length].replace("1)", "0.2)"),
          tension: 0.1,
          fill: true,
        })),
      };
    }
  }, [selectedCEIDs, filteredData, timePeriods, viewMode, selectedAreas]);

  return (
    <div className="w-full p-4">
      {/* Toggle View Mode */}
      <div className="mb-4 flex items-center gap-4">
        <span className="text-sm font-medium">View By:</span>
        <button
          className={`px-3 py-1 rounded-md ${viewMode === "CEID" ? "bg-blue-500 text-white" : "bg-gray-200 text-gray-700"}`}
          onClick={() => setViewMode("CEID")}
        >
          CEID
        </button>
        <button
          className={`px-3 py-1 rounded-md ${viewMode === "Area" ? "bg-blue-500 text-white" : "bg-gray-200 text-gray-700"}`}
          onClick={() => setViewMode("Area")}
        >
          Area
        </button>
      </div>

      {/* Process & Area Filters (Always on the Same Line) */}
      <div className="mb-4 flex flex-col md:flex-row gap-4">
        <div className="flex-1">
          <label className="block text-sm font-medium">Filter by Process:</label>
          <select
            value={selectedProcess}
            onChange={(e) => setSelectedProcess(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded-md"
          >
            {availableProcesses.map((process) => (
              <option key={process} value={process}>{process}</option>
            ))}
          </select>
        </div>

        {/* Area Selection */}
        <div className="flex-1">
          <label className="block text-sm font-medium">Filter by Area:</label>
          {viewMode === "CEID" ? (
            <select
              value={selectedArea}
              onChange={(e) => {
                setSelectedArea(e.target.value);
                setSelectedCEIDs([]);
              }}
              className="w-full p-2 border border-gray-300 rounded-md"
            >
              {uniqueAreas.map((area) => (
                <option key={area} value={area}>{area}</option>
              ))}
            </select>
          ) : (
            <div className="max-h-40 overflow-y-auto border border-gray-300 p-2 rounded-md">
              {uniqueAreas.filter(area => area !== "All").map((area) => (
                <div key={area} className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={selectedAreas.includes(area)}
                    onChange={() =>
                      setSelectedAreas((prev) => prev.includes(area) ? prev.filter((a) => a !== area) : [...prev, area])
                    }
                  />
                  <label>{area}</label>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Chart */}
      {chartData.datasets.length > 0 ? <Line data={chartData} options={{ responsive: true }} /> : <p>No data selected.</p>}
    </div>
  );
}
